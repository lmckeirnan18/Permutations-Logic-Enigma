Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/30/17 14:09:50
)Add and Subtract,           (AddSub2.asm		     Page 1 - 1


				TITLE Add and Subtract,           (AddSub2.asm)
				;Lily McKeirnan
				;permutation logic for final project Enigma Assembler

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				;-----------------------------------------------------
 00000000			.data


 00000000 45 6E 74 65 72	prompt1 BYTE "Enter a plainText: ",0
	   20 61 20 70 6C
	   61 69 6E 54 65
	   78 74 3A 20 00
 00000014 45 6E 74 65 72	prompt2 BYTE "Enter in a key size of 5 or 6: ",0
	   20 69 6E 20 61
	   20 6B 65 79 20
	   73 69 7A 65 20
	   6F 66 20 35 20
	   6F 72 20 36 3A
	   20 00
 00000034 45 6E 74 65 72	prompt3 BYTE "Enter in a key number value (using numbers 0-4 scrambled up): ",0
	   20 69 6E 20 61
	   20 6B 65 79 20
	   6E 75 6D 62 65
	   72 20 76 61 6C
	   75 65 20 28 75
	   73 69 6E 67 20
	   6E 75 6D 62 65
	   72 73 20 30 2D
	   34 20 73 63 72
	   61 6D 62 6C 65
	   64 20 75 70 29
	   3A 20 00
 00000073 56 61 6C 75 65	prompt4 BYTE "Values were outside the range of 0-4 inclusive. Try again: ",0
	   73 20 77 65 72
	   65 20 6F 75 74
	   73 69 64 65 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   6F 66 20 30 2D
	   34 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 20 54 72
	   79 20 61 67 61
	   69 6E 3A 20 00
 000000AF 59 6F 75 20 72	prompt5 BYTE "You repeated a value, try again: ",0
	   65 70 65 61 74
	   65 64 20 61 20
	   76 61 6C 75 65
	   2C 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000000D1 59 6F 75 72 20	prompt6 BYTE "Your Key: ",0
	   4B 65 79 3A 20
	   00
 000000DC 50 6C 61 69 6E	prompt7 BYTE "Plaintext:  ",0
	   74 65 78 74 3A
	   20 20 00
 000000E9 43 69 70 68 65	prompt8 BYTE "Cipher Text: ",0
	   72 20 54 65 78
	   74 3A 20 00
 000000F7 45 6E 74 65 72	prompt9 BYTE "Enter in a key number value (using numbers 0-5 scrambled up): ",0
	   20 69 6E 20 61
	   20 6B 65 79 20
	   6E 75 6D 62 65
	   72 20 76 61 6C
	   75 65 20 28 75
	   73 69 6E 67 20
	   6E 75 6D 62 65
	   72 73 20 30 2D
	   35 20 73 63 72
	   61 6D 62 6C 65
	   64 20 75 70 29
	   3A 20 00
 00000136 56 61 6C 75 65	prompt10 BYTE "Values were outside the range of 0-5 inclusive. Try again: ",0
	   73 20 77 65 72
	   65 20 6F 75 74
	   73 69 64 65 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   6F 66 20 30 2D
	   35 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 20 54 72
	   79 20 61 67 61
	   69 6E 3A 20 00

				;plainTextArray BYTE "h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d", " ", "f", "o", "u", "r",0
				;plainTextArray BYTE "hello world four",0

 00000172  00000064 [		plainTextArray BYTE 100 DUP(" "),0
	    20
	   ] 00
 000001D7 00000000		byteCount DWORD ?

 000001DB 20 00			space BYTE " ",0
 000001DD 00			ksize BYTE ?    ;for the different sizes of keyarrays

 000001DE  00000005 [		keyarray5 BYTE 5 DUP('#')		
	    23
	   ]
 000001E3  00000006 [		keyarray6 BYTE 6 DUP('#')
	    23
	   ]

 000001E9  00000065 [		cipherTextArray BYTE SIZEOF plainTextArray DUP(0)
	    00
	   ]
 0000024E 00			x BYTE ?							;variable we use in L3 and innerloop5 PROC
 0000024F 00			cipherTextString BYTE ?				;new array




 00000000			.code

				;********************MAIN PROC*************************
 00000000			main PROC

 00000000  BA 00000000 R	mov edx, OFFSET prompt1				;code for user inputing in plaintext 
 00000005  E8 00000000 E	call WriteString
 0000000A  BA 00000172 R	mov edx, OFFSET plainTextArray
 0000000F  B9 00000065		mov ecx, SIZEOF plainTextArray
 00000014  E8 00000000 E	call ReadString
 00000019  A3 000001D7 R	mov byteCount, eax

 0000001E  8B F0		mov esi, eax
 00000020  B9 00000002		mov ecx, 2
 00000025  8A 1D 000001DB R	mov bl, space

 0000002B			L10:
 0000002B  88 9E 00000172 R		mov plainTextArray[esi], bl				;taking care of the two dots in the plaintext array when reading in user input
 00000031  46				inc esi

 00000032  E2 F7		loop L10

				;--------------key size options---------------------
 00000034			Redo:
 00000034  BA 00000014 R		mov edx, OFFSET prompt2
 00000039  E8 00000000 E		call WriteString
 0000003E  E8 00000000 E		call ReadInt
 00000043  A2 000001DD R		mov ksize, al
 00000048  3C 05			cmp al, 5
 0000004A  72 E8			jb Redo
 0000004C  3C 06			cmp al, 6
 0000004E  77 E4			ja Redo

 00000050  80 3D 000001DD R		cmp ksize, 5
	   05
 00000057  74 02			je k5
 00000059  EB 07			jmp k6
 0000005B			k5:
 0000005B  E8 00000190			call KeySize5							;gets user input for a key of size five and checks it for validity
 00000060  EB 05			jmp Lend								
 00000062			k6:
 00000062  E8 000001E9			call KeySize6
 00000067			Lend:
				;----------------------------------------------------------------------
 00000067  E8 00000145		call DisplayKey								;displays the key that the user entered
				;-------------------------------------------

				;-----------------------------------------

				;need jumps here....
 0000006C  80 3D 000001DD R	cmp ksize, 5
	   05
 00000073  74 02		je m5
 00000075  EB 0C		jmp m6
 00000077			m5:
 00000077  E8 0000010A		call First5									;mixing up the first 5 elements (keyarray5 size = 5)
 0000007C  E8 000000A4		call Rest5									;mix up the remaining elements for keysize = 5
 00000081  EB 0A		jmp mend

 00000083			m6:
 00000083  E8 00000072		call First6									;mixing up the first 5 elements (keyarray5 size = 6)
 00000088  E8 0000000C		call Rest6									;mix up the remaining elements for keysize = 6


 0000008D			mend: 
				;----------------------------------------------------------------------
					
 0000008D  E8 0000021E			call Display									;use the display procedure to display the arrays

					exit
 00000092  6A 00	   *	    push   +000000000h
 00000094  E8 00000000 E   *	    call   ExitProcess
 00000099			main ENDP

				;********************************END MAIN*************************************************

				;-------------------Rest of the elements keysize = 6--------------
 00000099			Rest6 PROC
 00000099  B9 0000005F			mov ecx, SIZEOF plainTextArray - SIZEOF keyarray6				;do this loop for the rest of the elements in plainTextArray (12-4=8)????? do we need this???
 0000009E  BB 00000000			mov ebx, 0														;counter for moving along along in the array??
 000000A3  B8 00000000			mov eax, 0
 000000A8  BD 00000000			mov ebp, 0
 000000AD  BA 00000000			mov edx, 0

 000000B2  8A 85 00000178 R		mov al, plainTextArray[SIZEOF keyarray6 + ebp]					;get the letter from the plaintext
 000000B8  0F B6 B3			movzx esi,keyarray6[ebx]											;get the position from the keyarray5
	   000001E3 R

 000000BF  83 FE 06			cmp esi, SIZEOF keyarray6										;deciding if we need to mod to be able to apply the key array position elements 
 000000C2  72 0E			jb lcipherl						;????????????????

 000000C4  BF 00000006			mov edi, SIZEOF keyarray6
 000000C9  66| BA 0002			mov dx, 2
 000000CD  66| F7 E2			mul dx
 000000D0  03 F7			add esi,edi				;????????????????????


 000000D2				lcipherl:				;this is a jump
 000000D2  51					push ecx
 000000D3  B9 0000000F				mov ecx, (SIZEOF plainTextArray - SIZEOF keyarray6)/(SIZEOF keyarray6)

 000000D8  C6 05 0000024E R			mov x, 1
	   01
 000000DF					L14:
					
 000000DF  51					push ecx
 000000E0  B9 00000006				mov ecx, SIZEOF keyarray6

 000000E5  E8 00000247				Call innerloop6						;procedure defined below
					
 000000EA  59					pop ecx
 000000EB  FE 05 0000024E R			inc x
 000000F1  BB 00000000				mov ebx, 0
 000000F6  E2 E7				loop L14

						;pop esi
 000000F8  59					pop ecx
 000000F9  C3			ret
 000000FA			Rest6 ENDP
				;-------------Initial mix up of the plaintext for key of size 6 -------
 000000FA			First6 PROC
 000000FA  B9 00000006			mov ecx, SIZEOF keyarray6
 000000FF  BE 00000000			mov esi, 0 
 00000104  BB 00000000			mov ebx, 0
 00000109  B8 00000000			mov eax, 0
 0000010E				L13:
 0000010E  8A 83 00000172 R			mov al, plainTextArray[ebx]			;putting first element in al
 00000114  0F B6 B3				movzx esi, keyarray6[ebx]			;putting position to move the element into esi
	   000001E3 R
 0000011B  88 86 000001E9 R			mov cipherTextArray[esi],al			;putting element into the new position
 00000121  43					inc ebx
 00000122  E2 EA			loop L13

 00000124  C3			ret
 00000125			First6 ENDP


				;---------------END of first size 6 mix up--------

				;-------------------Rest of the elements keysize = 5--------------
 00000125			Rest5 PROC
 00000125  B9 00000060			mov ecx, SIZEOF plainTextArray - SIZEOF keyarray5				;do this loop for the rest of the elements in plainTextArray (12-4=8)????? do we need this???
 0000012A  BB 00000000			mov ebx, 0														;counter for moving along along in the array??
 0000012F  B8 00000000			mov eax, 0
 00000134  BD 00000000			mov ebp, 0
 00000139  BA 00000000			mov edx, 0

 0000013E  8A 85 00000177 R		mov al, plainTextArray[SIZEOF keyarray5 + ebp]					;get the letter from the plaintext
 00000144  0F B6 B3			movzx esi,keyarray5[ebx]											;get the position from the keyarray5
	   000001DE R

 0000014B  83 FE 05			cmp esi, SIZEOF keyarray5										;deciding if we need to mod to be able to apply the key array position elements 
 0000014E  72 0E			jb lcipher						;????????????????

 00000150  BF 00000005			mov edi, SIZEOF keyarray5
 00000155  66| BA 0002			mov dx, 2
 00000159  66| F7 E2			mul dx
 0000015C  03 F7			add esi,edi				;????????????????????


 0000015E				lcipher:				;this is a jump
 0000015E  51					push ecx
 0000015F  B9 00000013				mov ecx, (SIZEOF plainTextArray - SIZEOF keyarray5)/(SIZEOF keyarray5)

 00000164  C6 05 0000024E R			mov x, 1
	   01
 0000016B					L3:
					
 0000016B  51					push ecx
 0000016C  B9 00000005				mov ecx, SIZEOF keyarray5

 00000171  E8 00000186					Call innerloop5						;procedure defined below
					
 00000176  59					pop ecx
 00000177  FE 05 0000024E R			inc x
 0000017D  BB 00000000				mov ebx, 0
 00000182  E2 E7				loop L3

						;pop esi
 00000184  59					pop ecx
 00000185  C3			ret
 00000186			Rest5 ENDP


				;-------------Initial mix up of the plaintext for key of size 5 -------
 00000186			First5 PROC
 00000186  B9 00000005			mov ecx, SIZEOF keyarray5
 0000018B  BE 00000000			mov esi, 0 
 00000190  BB 00000000			mov ebx, 0
 00000195  B8 00000000			mov eax, 0
 0000019A				L1:
 0000019A  8A 83 00000172 R			mov al, plainTextArray[ebx]			;putting first element in al
 000001A0  0F B6 B3				movzx esi, keyarray5[ebx]			;putting position to move the element into esi
	   000001DE R
 000001A7  88 86 000001E9 R			mov cipherTextArray[esi],al			;putting element into the new position
 000001AD  43					inc ebx
 000001AE  E2 EA			loop L1

 000001B0  C3			ret
 000001B1			First5 ENDP


				;---------------END of first size 5 mix up--------

				;--------------DISPLAY KEY PROCEDURE------------------------
 000001B1			DisplayKey PROC
 000001B1  E8 00000000 E		call Crlf
 000001B6  B8 0000000E			mov eax, yellow
 000001BB  E8 00000000 E		call SetTextColor
 000001C0  BA 000000D1 R		mov edx, OFFSET prompt6
 000001C5  E8 00000000 E		call WriteString

 000001CA  0F B6 0D			movzx ecx, ksize
	   000001DD R
 000001D1  BE 00000000			mov esi, 0
 000001D6				L6:
 000001D6  BA 000001DE R			mov edx, OFFSET keyarray5			;displaying the final key
 000001DB  0F B6 86				movzx eax, keyarray5[esi]
	   000001DE R
 000001E2  E8 00000000 E			call writeInt
 000001E7  46					inc esi
 000001E8  E2 EC			loop L6
 000001EA  E8 00000000 E		call Crlf

 000001EF  C3				ret
 000001F0			DisplayKey ENDP



				;-----------------------------KEYSIZE 5 checking procedure------------------
 000001F0			KeySize5 PROC
 000001F0  B9 00000005			mov ecx, 5							;code for user entering in key of size 5 (range 0-4)
 000001F5  BE 00000000			mov esi, 0
 000001FA				L2:
					
 000001FA  56					push esi
 000001FB  51					push ecx 
 000001FC  BA 00000034 R			mov edx, OFFSET prompt3
 00000201  E8 00000000 E			call WriteString
 00000206					Next:
 00000206  E8 00000000 E				call ReadInt
 0000020B  83 F8 04					cmp eax, 4
 0000020E  77 1C					ja OutOfRange
 00000210  83 F8 00					cmp eax, 0
 00000213  72 17					jb OutOfRange
						;-------------------loop comparing values entered with ones in the array----------------------
 00000215  B9 00000005				mov ecx, 5
 0000021A  BE 00000000				mov esi, 0
 0000021F					L5:
 0000021F  3A 86 000001DE R				cmp al, keyarray5[esi]
 00000225  74 11					je Repeats
 00000227  46						inc esi
 00000228  E2 F5				loop L5
 0000022A  EB 18				jmp Done
						;-------------------------------------------------

 0000022C					OutOfRange:
 0000022C  BA 00000073 R				mov edx, OFFSET prompt4
 00000231  E8 00000000 E				call WriteString
 00000236  EB CE					jmp Next

 00000238					Repeats:
 00000238  BA 000000AF R				mov edx, OFFSET prompt5
 0000023D  E8 00000000 E				call WriteString
 00000242  EB C2					jmp Next
 00000244					Done:
 00000244  59						pop ecx
 00000245  5E						pop esi
 00000246  88 86 000001DE R				mov keyarray5[esi], al
 0000024C  46						inc esi
 0000024D  E2 AB			loop L2

 0000024F  C3			ret
 00000250			KeySize5 ENDP


				;--------------KEY6 checking procedure-----------------------
 00000250			KeySize6 PROC
 00000250  B9 00000006			mov ecx, 6							;code for user entering in key of size 5 (range 0-4)
 00000255  BE 00000000			mov esi, 0
 0000025A				L11:
					
 0000025A  56					push esi
 0000025B  51					push ecx 
 0000025C  BA 000000F7 R			mov edx, OFFSET prompt9
 00000261  E8 00000000 E			call WriteString
 00000266					Next:
 00000266  E8 00000000 E				call ReadInt
 0000026B  83 F8 05					cmp eax, 5
 0000026E  77 1C					ja OutOfRange
 00000270  83 F8 00					cmp eax, 0
 00000273  72 17					jb OutOfRange
						;-------------------loop comparing values entered with ones in the array----------------------
 00000275  B9 00000006				mov ecx, 6
 0000027A  BE 00000000				mov esi, 0
 0000027F					L12:
 0000027F  3A 86 000001DE R				cmp al, keyarray5[esi]
 00000285  74 11					je Repeats
 00000287  46						inc esi
 00000288  E2 F5				loop L12
 0000028A  EB 18				jmp Done
						;-------------------------------------------------

 0000028C					OutOfRange:
 0000028C  BA 00000136 R				mov edx, OFFSET prompt10
 00000291  E8 00000000 E				call WriteString
 00000296  EB CE					jmp Next

 00000298					Repeats:
 00000298  BA 000000AF R				mov edx, OFFSET prompt5
 0000029D  E8 00000000 E				call WriteString
 000002A2  EB C2					jmp Next
 000002A4					Done:
 000002A4  59						pop ecx
 000002A5  5E						pop esi
 000002A6  88 86 000001DE R				mov keyarray5[esi], al
 000002AC  46						inc esi
 000002AD  E2 AB			loop L11

 000002AF  C3			ret
 000002B0			KeySize6 ENDP

				;---------------Display procedure-------------------------
 000002B0			Display PROC
				;display arrays
 000002B0  B8 00000003			mov eax, (cyan)
 000002B5  E8 00000000 E		call SetTextColor
 000002BA  BA 000000DC R		mov edx, OFFSET prompt7
 000002BF  E8 00000000 E		call WriteString
 000002C4  BA 00000172 R		mov edx, OFFSET plainTextArray
 000002C9  E8 00000000 E		call Writestring
 000002CE  E8 00000000 E		call Crlf
 000002D3  B8 00000004			mov eax, (red)
 000002D8  E8 00000000 E		call SetTextColor
 000002DD  BA 000000E9 R		mov edx, OFFSET prompt8
 000002E2  E8 00000000 E		call WriteString
 000002E7  BA 000001E9 R		mov edx, OffSET cipherTextArray
 000002EC  E8 00000000 E		call Writestring
 000002F1  E8 00000000 E		call Crlf
 000002F6  E8 00000000 E		call Crlf
 000002FB  C3			ret
 000002FC			Display ENDP

				;-------------------------END DISPLAy PROCEDURE KeyArray Size = 5----------
 000002FC			innerloop5 PROC

 000002FC			L4:
						
 000002FC  8A 85 00000177 R			mov al, plainTextArray[SIZEOF keyarray5 + ebp]	
 00000302  0F B6 B3				movzx esi,keyarray5[ebx]	
	   000001DE R
 00000309  53					push ebx
 0000030A  50					push eax
 0000030B  56					push esi
 0000030C  B8 00000005				mov eax, SIZEOF keyarray5
 00000311  0F B6 1D				movzx ebx, x
	   0000024E R
 00000318  F7 E3				mul ebx	
 0000031A  5E					pop esi					;product is in edx
 0000031B  03 C6				add eax, esi 
 0000031D  8B D0				mov edx, eax
 0000031F  B8 00000000				mov eax, 0					 
 00000324  58					pop eax
 00000325  88 82 000001E9 R			mov cipherTextArray[edx],al
 0000032B  5B					pop ebx						;?????????
 0000032C  43					inc ebx		
 0000032D  45					inc ebp
						
						
 0000032E  E2 CC				loop L4

 00000330  C3			ret
 00000331			innerloop5 ENDP


				;---------------END DISPLAY PROCEDURE KeyArray Size = 6----------------------------
 00000331			innerloop6 PROC

 00000331			L15:
						
 00000331  8A 85 00000178 R			mov al, plainTextArray[SIZEOF keyarray6 + ebp]	
 00000337  0F B6 B3				movzx esi,keyarray6[ebx]	
	   000001E3 R
 0000033E  53					push ebx
 0000033F  50					push eax
 00000340  56					push esi
 00000341  B8 00000006				mov eax, SIZEOF keyarray6
 00000346  0F B6 1D				movzx ebx, x
	   0000024E R
 0000034D  F7 E3				mul ebx	
 0000034F  5E					pop esi					;product is in edx
 00000350  03 C6				add eax, esi 
 00000352  8B D0				mov edx, eax
 00000354  B8 00000000				mov eax, 0					 
 00000359  58					pop eax
 0000035A  88 82 000001E9 R			mov cipherTextArray[edx],al
 00000360  5B					pop ebx						;?????????
 00000361  43					inc ebx		
 00000362  45					inc ebp
						
						
 00000363  E2 CC				loop L15

 00000365  C3			ret
 00000366			innerloop6 ENDP
				;-----------------------------------------------







				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/30/17 14:09:50
)Add and Subtract,           (AddSub2.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000250 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000366 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayKey . . . . . . . . . . .	P Near	 000001B1 _TEXT	Length= 0000003F Public STDCALL
  L6 . . . . . . . . . . . . . .	L Near	 000001D6 _TEXT	
Display  . . . . . . . . . . . .	P Near	 000002B0 _TEXT	Length= 0000004C Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
First5 . . . . . . . . . . . . .	P Near	 00000186 _TEXT	Length= 0000002B Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000019A _TEXT	
First6 . . . . . . . . . . . . .	P Near	 000000FA _TEXT	Length= 0000002B Public STDCALL
  L13  . . . . . . . . . . . . .	L Near	 0000010E _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
KeySize5 . . . . . . . . . . . .	P Near	 000001F0 _TEXT	Length= 00000060 Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 000001FA _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000206 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 0000021F _TEXT	
  OutOfRange . . . . . . . . . .	L Near	 0000022C _TEXT	
  Repeats  . . . . . . . . . . .	L Near	 00000238 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 00000244 _TEXT	
KeySize6 . . . . . . . . . . . .	P Near	 00000250 _TEXT	Length= 00000060 Public STDCALL
  L11  . . . . . . . . . . . . .	L Near	 0000025A _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000266 _TEXT	
  L12  . . . . . . . . . . . . .	L Near	 0000027F _TEXT	
  OutOfRange . . . . . . . . . .	L Near	 0000028C _TEXT	
  Repeats  . . . . . . . . . . .	L Near	 00000298 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 000002A4 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Rest5  . . . . . . . . . . . . .	P Near	 00000125 _TEXT	Length= 00000061 Public STDCALL
  lcipher  . . . . . . . . . . .	L Near	 0000015E _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000016B _TEXT	
Rest6  . . . . . . . . . . . . .	P Near	 00000099 _TEXT	Length= 00000061 Public STDCALL
  lcipherl . . . . . . . . . . .	L Near	 000000D2 _TEXT	
  L14  . . . . . . . . . . . . .	L Near	 000000DF _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
innerloop5 . . . . . . . . . . .	P Near	 000002FC _TEXT	Length= 00000035 Public STDCALL
  L4 . . . . . . . . . . . . . .	L Near	 000002FC _TEXT	
innerloop6 . . . . . . . . . . .	P Near	 00000331 _TEXT	Length= 00000035 Public STDCALL
  L15  . . . . . . . . . . . . .	L Near	 00000331 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000099 Public STDCALL
  L10  . . . . . . . . . . . . .	L Near	 0000002B _TEXT	
  Redo . . . . . . . . . . . . .	L Near	 00000034 _TEXT	
  k5 . . . . . . . . . . . . . .	L Near	 0000005B _TEXT	
  k6 . . . . . . . . . . . . . .	L Near	 00000062 _TEXT	
  Lend . . . . . . . . . . . . .	L Near	 00000067 _TEXT	
  m5 . . . . . . . . . . . . . .	L Near	 00000077 _TEXT	
  m6 . . . . . . . . . . . . . .	L Near	 00000083 _TEXT	
  mend . . . . . . . . . . . . .	L Near	 0000008D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 000001D7 _DATA	
cipherTextArray  . . . . . . . .	Byte	 000001E9 _DATA	
cipherTextString . . . . . . . .	Byte	 0000024F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
keyarray5  . . . . . . . . . . .	Byte	 000001DE _DATA	
keyarray6  . . . . . . . . . . .	Byte	 000001E3 _DATA	
ksize  . . . . . . . . . . . . .	Byte	 000001DD _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
plainTextArray . . . . . . . . .	Byte	 00000172 _DATA	
prompt10 . . . . . . . . . . . .	Byte	 00000136 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000014 _DATA	
prompt3  . . . . . . . . . . . .	Byte	 00000034 _DATA	
prompt4  . . . . . . . . . . . .	Byte	 00000073 _DATA	
prompt5  . . . . . . . . . . . .	Byte	 000000AF _DATA	
prompt6  . . . . . . . . . . . .	Byte	 000000D1 _DATA	
prompt7  . . . . . . . . . . . .	Byte	 000000DC _DATA	
prompt8  . . . . . . . . . . . .	Byte	 000000E9 _DATA	
prompt9  . . . . . . . . . . . .	Byte	 000000F7 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 000001DB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x  . . . . . . . . . . . . . . .	Byte	 0000024E _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
