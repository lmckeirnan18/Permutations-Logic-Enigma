Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/05/17 14:10:51
)Add and Subtract,           (AddSub2.asm		     Page 1 - 1


				TITLE Add and Subtract,           (AddSub2.asm)
				;Lily McKeirnan
				;permutation logic for final project Enigma Assembler

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				;-----------------------------------------------------
 00000000			.data


 00000000 45 6E 74 65 72	prompt1 BYTE "Enter a plainText: ",0
	   20 61 20 70 6C
	   61 69 6E 54 65
	   78 74 3A 20 00
 00000014 45 6E 74 65 72	prompt2 BYTE "Enter in a key size of 5 or 6: ",0
	   20 69 6E 20 61
	   20 6B 65 79 20
	   73 69 7A 65 20
	   6F 66 20 35 20
	   6F 72 20 36 3A
	   20 00
 00000034 45 6E 74 65 72	prompt3 BYTE "Enter in a key number value (using numbers 0-4 scrambled up): ",0
	   20 69 6E 20 61
	   20 6B 65 79 20
	   6E 75 6D 62 65
	   72 20 76 61 6C
	   75 65 20 28 75
	   73 69 6E 67 20
	   6E 75 6D 62 65
	   72 73 20 30 2D
	   34 20 73 63 72
	   61 6D 62 6C 65
	   64 20 75 70 29
	   3A 20 00
 00000073 56 61 6C 75 65	prompt4 BYTE "Values were outside the range of 0-4 inclusive. Try again: ",0
	   73 20 77 65 72
	   65 20 6F 75 74
	   73 69 64 65 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   6F 66 20 30 2D
	   34 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 20 54 72
	   79 20 61 67 61
	   69 6E 3A 20 00
 000000AF 59 6F 75 20 72	prompt5 BYTE "You repeated a value, try again: ",0
	   65 70 65 61 74
	   65 64 20 61 20
	   76 61 6C 75 65
	   2C 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000000D1 4B 65 79 3A 20	prompt6 BYTE "Key: ",0
	   00
 000000D7 50 6C 61 69 6E	prompt7 BYTE "Plaintext:  ",0
	   74 65 78 74 3A
	   20 20 00
 000000E4 43 69 70 68 65	prompt8 BYTE "CipherText: ",0
	   72 54 65 78 74
	   3A 20 00
 000000F1 45 6E 74 65 72	prompt9 BYTE "Enter in a key number value (using numbers 0-5 scrambled up): ",0
	   20 69 6E 20 61
	   20 6B 65 79 20
	   6E 75 6D 62 65
	   72 20 76 61 6C
	   75 65 20 28 75
	   73 69 6E 67 20
	   6E 75 6D 62 65
	   72 73 20 30 2D
	   35 20 73 63 72
	   61 6D 62 6C 65
	   64 20 75 70 29
	   3A 20 00
 00000130 56 61 6C 75 65	prompt10 BYTE "Values were outside the range of 0-5 inclusive. Try again: ",0
	   73 20 77 65 72
	   65 20 6F 75 74
	   73 69 64 65 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   6F 66 20 30 2D
	   35 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 20 54 72
	   79 20 61 67 61
	   69 6E 3A 20 00
 0000016C 50 6F 73 3A 20	prompt11 BYTE "Pos: ",0
	   00
 00000172 4C 65 74 74 65	prompt12 BYTE "Letters and blanks spaces count as 0.",0
	   72 73 20 61 6E
	   64 20 62 6C 61
	   6E 6B 73 20 73
	   70 61 63 65 73
	   20 63 6F 75 6E
	   74 20 61 73 20
	   30 2E 00
 00000198 57 6F 75 6C 64	prompt13 BYTE "Would you like to encrypt another message? 0 = 'no' and 1 = 'yes': ",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 65 6E
	   63 72 79 70 74
	   20 61 6E 6F 74
	   68 65 72 20 6D
	   65 73 73 61 67
	   65 3F 20 30 20
	   3D 20 27 6E 6F
	   27 20 61 6E 64
	   20 31 20 3D 20
	   27 79 65 73 27
	   3A 20 00
 000001DC 47 6F 6F 64 62	prompt14 BYTE "Goodbye. ",0
	   79 65 2E 20 00


 000001E6  00000078 [		plainTextArray BYTE 120 DUP(" "),0
	    20
	   ] 00
 0000025F 00000000		byteCount DWORD ?

 00000263 20 00			space BYTE " ",0
 00000265 5B 00			lbracket BYTE "[",0
 00000267 5D 00			rbracket BYTE "]",0
 00000269 7B 00			lbrace BYTE "{",0
 0000026B 7D 00			rbrace BYTE "}",0
 0000026D 00			ksize BYTE ?    ;for the different sizes of keyarrays
 0000026E 00			holder BYTE ?			;used for displaying with "{}" when determining length and position

 0000026F  00000005 [		keyarray5 BYTE 5 DUP('#')		
	    23
	   ]
 00000274  00000006 [		keyarray6 BYTE 6 DUP('#')
	    23
	   ]
 0000027A 00 01 02 03 04	posarray5 BYTE 0, 1, 2, 3, 4
 0000027F 00 01 02 03 04	posarray6 BYTE 0, 1, 2, 3, 4, 5
	   05

 00000285  00000079 [		cipherTextArray BYTE SIZEOF plainTextArray DUP(0)
	    00
	   ]
 000002FE 00			x BYTE ?							;variable we use in L3 and innerloop5 PROC
 000002FF 00			cipherTextString BYTE ?				;new array




 00000000			.code

				;********************MAIN PROC*************************
 00000000			main PROC

 00000000			Encrypt:

 00000000  B8 0000000F		mov eax, white
 00000005  E8 00000000 E	call SetTextColor

 0000000A  BE 00000000		mov esi, 0
 0000000F  B9 00000005		mov ecx, 5
 00000014			clear5:
 00000014  C6 86 0000026F R		mov keyArray5[esi], '#'
	   23
 0000001B  46				inc esi

 0000001C  E2 F6		loop clear5

 0000001E  BE 00000000		mov esi, 0
 00000023  B9 00000006		mov ecx, 6
 00000028			clear6:
 00000028  C6 86 00000274 R		mov keyArray6[esi], '#'
	   23
 0000002F  46				inc esi

 00000030  E2 F6		loop clear6


 00000032  BE 00000000		mov esi, 0
 00000037  B9 00000078		mov ecx, 120
 0000003C			cleartextarrays:
 0000003C  C6 86 000001E6 R		mov plaintextArray[esi], ' ' 
	   20
 00000043  C6 86 00000285 R		mov ciphertextArray[esi], ' '
	   20
 0000004A  46				inc esi
 0000004B  E2 EF		loop cleartextarrays



 0000004D  BA 00000000 R	mov edx, OFFSET prompt1				;code for user inputing in plaintext 
 00000052  E8 00000000 E	call WriteString
 00000057  BA 000001E6 R	mov edx, OFFSET plainTextArray
 0000005C  B9 00000079		mov ecx, SIZEOF plainTextArray
 00000061  E8 00000000 E	call ReadString
 00000066  A3 0000025F R	mov byteCount, eax

 0000006B  8B F0		mov esi, eax
 0000006D  B9 00000002		mov ecx, 2
 00000072  8A 1D 00000263 R	mov bl, space

 00000078			L10:
 00000078  88 9E 000001E6 R		mov plainTextArray[esi], bl				;taking care of the two dots in the plaintext array when reading in user input
 0000007E  46				inc esi

 0000007F  E2 F7		loop L10
													
				;--------------key size options---------------------
 00000081			Redo:
 00000081  BA 00000014 R		mov edx, OFFSET prompt2
 00000086  E8 00000000 E		call WriteString
 0000008B  E8 00000000 E		call ReadInt
 00000090  A2 0000026D R		mov ksize, al
 00000095  3C 05			cmp al, 5
 00000097  72 E8			jb Redo
 00000099  3C 06			cmp al, 6
 0000009B  77 E4			ja Redo

 0000009D  E8 00000000 E		call Crlf
 000000A2  BA 00000172 R		mov edx, OFFSET prompt12
 000000A7  E8 00000000 E		call WriteString
 000000AC  E8 00000000 E		call crlf
 000000B1  E8 00000000 E		call crlf

 000000B6  80 3D 0000026D R		cmp ksize, 5
	   05
 000000BD  74 02			je k5
 000000BF  EB 0C			jmp k6

 000000C1			k5:
 000000C1  E8 00000317			call KeySize5				;gets user input for a key of size five and checks it for validity
 000000C6  E8 000001E6			call DisplayKey5			;displays the key that the user entered					
 000000CB  EB 0A			jmp Lend								
 000000CD			k6:
 000000CD  E8 0000036B			call KeySize6				;gets user input for a key of size five and checks it for validity
 000000D2  E8 00000270			call DisplayKey6			;displays the key that the user entered
 000000D7			Lend:
				;----------------------------------------------------------------------

 000000D7  80 3D 0000026D R	cmp ksize, 5
	   05
 000000DE  74 02		je m5
 000000E0  EB 31		jmp m6
 000000E2			m5:
 000000E2  E8 0000019F		call First5									;mixing up the first 5 elements (keyarray5 size = 5)
 000000E7  E8 00000139		call Rest5									;mix up the remaining elements for keysize = 5
 000000EC  A1 0000025F R	mov eax, bytecount							;dividen
 000000F1  B3 05		mov bl, SIZEOF keyarray5					;divisor
 000000F3  F6 F3		div bl										;dividing number of characters entered by size of key array (quotient in AL, remainder in AH)
 000000F5  B3 05		mov bl, SIZEOF keyarray5					;multiplies whats in al with whats in bl, AX contains product
 000000F7  F6 E3		mul bl
 000000F9  66| 83 C0 05		add ax, SIZEOF keyarray5
 000000FD  8B F0		mov esi, eax
 000000FF  8A 1D 0000026B R	mov bl, rbrace
 00000105  88 9E 000001E6 R	mov plainTextArray[esi], bl					;moving "}" into the plaintext array (need to subtract the 2 spaces added)						
 0000010B  88 9E 00000285 R	mov cipherTextArray[esi], bl				;moving "}" into the ciphertext array (need to add 1 )


				;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!add jump when remander = 0!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 00000111  EB 2F		jmp mend

 00000113			m6:
 00000113  E8 000000E2		call First6									;mixing up the first 5 elements (keyarray5 size = 6)
 00000118  E8 0000007C		call Rest6									;mix up the remaining elements for keysize = 6
 0000011D  A1 0000025F R	mov eax, bytecount							;dividen
 00000122  B3 06		mov bl, SIZEOF keyarray6					;divisor
 00000124  F6 F3		div bl										;dividing number of characters entered by size of key array (quotient in AL, remainder in AH)
 00000126  B3 06		mov bl, SIZEOF keyarray6					;multiplies whats in al with whats in bl, AX contains product
 00000128  F6 E3		mul bl
 0000012A  66| 83 C0 06		add ax, SIZEOF keyarray6
 0000012E  8B F0		mov esi, eax
 00000130  8A 1D 0000026B R	mov bl, rbrace
 00000136  88 9E 000001E6 R	mov plainTextArray[esi], bl					;moving "}" into the plaintext array (need to subtract the 2 spaces added)						
 0000013C  88 9E 00000285 R	mov cipherTextArray[esi], bl				;moving "}" into the ciphertext array (need to add 1 )



 00000142			mend: 
				;----------------------------------------------------------------------
					
 00000142  E8 00000356		call Display									;use the display procedure to display the arrays

 00000147  B8 0000000F		mov eax, white
 0000014C  E8 00000000 E	call SetTextColor

 00000151			Again:
 00000151  BA 00000198 R		mov edx, OFFSET prompt13
 00000156  E8 00000000 E		call WriteString
 0000015B  E8 00000000 E		call Readint
 00000160  E8 00000000 E		call crlf
 00000165  83 F8 01			cmp eax, 1					;1 means "yes"
 00000168  77 1C			ja OutOfRange2				;is the value to big
 0000016A  0F 84 FFFFFE90		je Encrypt
 00000170  83 F8 00			cmp eax, 0					;0 means "no"
 00000173  72 11			jb OutOfRange2				;is the value to small
					
 00000175  BA 000001DC R		mov edx, OFFSET prompt14
 0000017A  E8 00000000 E		call WriteString
 0000017F  E8 00000000 E		call Crlf
 00000184  EB 0C			jmp pend

 00000186				OutOfRange2:
 00000186  BA 00000073 R			mov edx, OFFSET prompt4
 0000018B  E8 00000000 E			call WriteString
 00000190  EB BF				jmp Again

 00000192				pend: 

					exit
 00000192  6A 00	   *	    push   +000000000h
 00000194  E8 00000000 E   *	    call   ExitProcess
 00000199			main ENDP

				;********************************END MAIN*************************************************

				;-------------------Rest of the elements keysize = 6--------------
 00000199			Rest6 PROC
 00000199  B9 00000073			mov ecx, SIZEOF plainTextArray - SIZEOF keyarray6				;do this loop for the rest of the elements in plainTextArray (12-4=8)????? do we need this???
 0000019E  BB 00000000			mov ebx, 0														;counter for moving along along in the array??
 000001A3  B8 00000000			mov eax, 0
 000001A8  BD 00000000			mov ebp, 0
 000001AD  BA 00000000			mov edx, 0

 000001B2  8A 85 000001EC R		mov al, plainTextArray[SIZEOF keyarray6 + ebp]					;get the letter from the plaintext
 000001B8  0F B6 B3			movzx esi,keyarray6[ebx]											;get the position from the keyarray5
	   00000274 R

 000001BF  83 FE 06			cmp esi, SIZEOF keyarray6										;deciding if we need to mod to be able to apply the key array position elements 
 000001C2  72 0E			jb lcipherl						;

 000001C4  BF 00000006			mov edi, SIZEOF keyarray6
 000001C9  66| BA 0002			mov dx, 2
 000001CD  66| F7 E2			mul dx
 000001D0  03 F7			add esi,edi				;????????????????????


 000001D2				lcipherl:				;this is a jump
 000001D2  51					push ecx
 000001D3  B9 00000013				mov ecx, (SIZEOF plainTextArray - SIZEOF keyarray6)/(SIZEOF keyarray6)

 000001D8  C6 05 000002FE R			mov x, 1
	   01
 000001DF					L14:
					
 000001DF  51					push ecx
 000001E0  B9 00000006				mov ecx, SIZEOF keyarray6

 000001E5  E8 0000034D				Call innerloop6						;procedure defined below
					
 000001EA  59					pop ecx
 000001EB  FE 05 000002FE R			inc x
 000001F1  BB 00000000				mov ebx, 0
 000001F6  E2 E7				loop L14

						;pop esi
 000001F8  59					pop ecx
 000001F9  C3			ret
 000001FA			Rest6 ENDP
				;-------------Initial mix up of the plaintext for key of size 6 -------
 000001FA			First6 PROC
 000001FA  B9 00000006			mov ecx, SIZEOF keyarray6
 000001FF  BE 00000000			mov esi, 0 
 00000204  BB 00000000			mov ebx, 0
 00000209  B8 00000000			mov eax, 0
 0000020E				L13:
 0000020E  8A 83 000001E6 R			mov al, plainTextArray[ebx]			;putting first element in al
 00000214  0F B6 B3				movzx esi, keyarray6[ebx]			;putting position to move the element into esi
	   00000274 R
 0000021B  88 86 00000285 R			mov cipherTextArray[esi],al			;putting element into the new position
 00000221  43					inc ebx
 00000222  E2 EA			loop L13

 00000224  C3			ret
 00000225			First6 ENDP


				;---------------END of first size 6 mix up--------

				;-------------------Rest of the elements keysize = 5--------------
 00000225			Rest5 PROC
 00000225  B9 00000074			mov ecx, SIZEOF plainTextArray - SIZEOF keyarray5				;do this loop for the rest of the elements in plainTextArray (12-4=8)????? do we need this???
 0000022A  BB 00000000			mov ebx, 0														;counter for moving along along in the array??
 0000022F  B8 00000000			mov eax, 0
 00000234  BD 00000000			mov ebp, 0
 00000239  BA 00000000			mov edx, 0

 0000023E  8A 85 000001EB R		mov al, plainTextArray[SIZEOF keyarray5 + ebp]					;get the letter from the plaintext
 00000244  0F B6 B3			movzx esi,keyarray5[ebx]											;get the position from the keyarray5
	   0000026F R

 0000024B  83 FE 05			cmp esi, SIZEOF keyarray5										;deciding if we need to mod to be able to apply the key array position elements 
 0000024E  72 0E			jb lcipher						;????????????????

 00000250  BF 00000005			mov edi, SIZEOF keyarray5
 00000255  66| BA 0002			mov dx, 2
 00000259  66| F7 E2			mul dx
 0000025C  03 F7			add esi,edi				;????????????????????


 0000025E				lcipher:				;this is a jump
 0000025E  51					push ecx
 0000025F  B9 00000017				mov ecx, (SIZEOF plainTextArray - SIZEOF keyarray5)/(SIZEOF keyarray5)			;loop counter 

 00000264  C6 05 000002FE R			mov x, 1
	   01
 0000026B					L3:
					
 0000026B  51					push ecx
 0000026C  B9 00000005				mov ecx, SIZEOF keyarray5

 00000271  E8 0000028C					Call innerloop5						;procedure defined below
					
 00000276  59					pop ecx
 00000277  FE 05 000002FE R			inc x
 0000027D  BB 00000000				mov ebx, 0
 00000282  E2 E7				loop L3

						;pop esi
 00000284  59					pop ecx
 00000285  C3			ret
 00000286			Rest5 ENDP


				;-------------Initial mix up of the plaintext for key of size 5 -------
 00000286			First5 PROC
 00000286  B9 00000005			mov ecx, SIZEOF keyarray5
 0000028B  BE 00000000			mov esi, 0 
 00000290  BB 00000000			mov ebx, 0
 00000295  B8 00000000			mov eax, 0
 0000029A				L1:
 0000029A  8A 83 000001E6 R			mov al, plainTextArray[ebx]			;putting first element in al
 000002A0  0F B6 B3				movzx esi, keyarray5[ebx]			;putting position to move the element into esi
	   0000026F R
 000002A7  88 86 00000285 R			mov cipherTextArray[esi],al			;putting element into the new position
 000002AD  43					inc ebx
 000002AE  E2 EA			loop L1

 000002B0  C3			ret
 000002B1			First5 ENDP


				;---------------END of first size 5 mix up--------

				;--------------DISPLAY KEY PROCEDURE key size = 5------------------------
 000002B1			DisplayKey5 PROC
 000002B1  E8 00000000 E		call Crlf
 000002B6  B8 0000000E			mov eax, yellow
 000002BB  E8 00000000 E		call SetTextColor
 000002C0  BA 0000016C R		mov edx, OFFSET prompt11
 000002C5  E8 00000000 E		call WriteString
 000002CA  BA 00000265 R		mov edx, OFFSET Lbracket
 000002CF  E8 00000000 E		call WriteString
 000002D4  0F B6 0D			movzx ecx, ksize
	   0000026D R
 000002DB  BE 00000000			mov esi, 0
 000002E0				L17:
 000002E0  BA 0000027A R			mov edx, OFFSET posarray5			;displaying the positions
 000002E5  0F B6 86				movzx eax, posarray5[esi]
	   0000027A R
 000002EC  E8 00000000 E			call writeInt
 000002F1  46					inc esi
 000002F2  E2 EC			loop L17
 000002F4  BA 00000267 R		mov edx, OFFSET Rbracket
 000002F9  E8 00000000 E		call WriteString
 000002FE  E8 00000000 E		call Crlf

 00000303  BA 000000D1 R		mov edx, OFFSET prompt6
 00000308  E8 00000000 E		call WriteString
 0000030D  BA 00000265 R		mov edx, OFFSET Lbracket
 00000312  E8 00000000 E		call WriteString
 00000317  0F B6 0D			movzx ecx, ksize
	   0000026D R
 0000031E  BE 00000000			mov esi, 0
 00000323				L6:
 00000323  BA 0000026F R			mov edx, OFFSET keyarray5			;displaying the final key
 00000328  0F B6 86				movzx eax, keyarray5[esi]
	   0000026F R
 0000032F  E8 00000000 E			call writeInt
 00000334  46					inc esi
 00000335  E2 EC			loop L6
 00000337  BA 00000267 R		mov edx, OFFSET Rbracket
 0000033C  E8 00000000 E		call WriteString
 00000341  E8 00000000 E		call Crlf

 00000346  C3				ret
 00000347			DisplayKey5 ENDP

				;--------------DISPLAY KEY PROCEDURE key size = 6------------------------
 00000347			DisplayKey6 PROC
 00000347  E8 00000000 E		call Crlf
 0000034C  B8 0000000E			mov eax, yellow
 00000351  E8 00000000 E		call SetTextColor
 00000356  BA 0000016C R		mov edx, OFFSET prompt11
 0000035B  E8 00000000 E		call WriteString
 00000360  BA 00000265 R		mov edx, OFFSET Lbracket
 00000365  E8 00000000 E		call WriteString
 0000036A  0F B6 0D			movzx ecx, ksize
	   0000026D R
 00000371  BE 00000000			mov esi, 0
 00000376				L18:
 00000376  BA 0000027F R			mov edx, OFFSET posarray6			;displaying the positions
 0000037B  0F B6 86				movzx eax, posarray6[esi]
	   0000027F R
 00000382  E8 00000000 E			call writeInt
 00000387  46					inc esi
 00000388  E2 EC			loop L18
 0000038A  BA 00000267 R		mov edx, OFFSET Rbracket
 0000038F  E8 00000000 E		call WriteString
 00000394  E8 00000000 E		call Crlf

 00000399  BA 000000D1 R		mov edx, OFFSET prompt6
 0000039E  E8 00000000 E		call WriteString
 000003A3  BA 00000265 R		mov edx, OFFSET Lbracket
 000003A8  E8 00000000 E		call WriteString
 000003AD  0F B6 0D			movzx ecx, ksize
	   0000026D R
 000003B4  BE 00000000			mov esi, 0
 000003B9				L16:
 000003B9  BA 00000274 R			mov edx, OFFSET keyarray6			;displaying the final key
 000003BE  0F B6 86				movzx eax, keyarray6[esi]
	   00000274 R
 000003C5  E8 00000000 E			call writeInt
 000003CA  46					inc esi
 000003CB  E2 EC			loop L16
 000003CD  BA 00000267 R		mov edx, OFFSET Rbracket
 000003D2  E8 00000000 E		call WriteString
 000003D7  E8 00000000 E		call Crlf

 000003DC  C3				ret
 000003DD			DisplayKey6 ENDP

				;-----------------------------KEYSIZE 5 checking procedure------------------
 000003DD			KeySize5 PROC
 000003DD  B9 00000005			mov ecx, 5							;code for user entering in key of size 5 (range 0-4)
 000003E2  BE 00000000			mov esi, 0
 000003E7				L2:
					
 000003E7  56					push esi
 000003E8  51					push ecx 
 000003E9  BA 00000034 R			mov edx, OFFSET prompt3
 000003EE  E8 00000000 E			call WriteString
 000003F3					Next:
 000003F3  E8 00000000 E				call ReadInt			
 000003F8  83 F8 04					cmp eax, 4
 000003FB  77 1C					ja OutOfRange				;is the value to big
 000003FD  83 F8 00					cmp eax, 0
 00000400  72 17					jb OutOfRange				;is the value to small


						;-------------------loop comparing values entered with ones in the array----------------------
 00000402  B9 00000005				mov ecx, 5
 00000407  BE 00000000				mov esi, 0
 0000040C					L5:
 0000040C  3A 86 0000026F R				cmp al, keyarray5[esi]
 00000412  74 11					je Repeats
 00000414  46						inc esi
 00000415  E2 F5				loop L5
 00000417  EB 18				jmp Done
						;-------------------------------------------------

 00000419					OutOfRange:
 00000419  BA 00000073 R				mov edx, OFFSET prompt4
 0000041E  E8 00000000 E				call WriteString
 00000423  EB CE					jmp Next

 00000425					Repeats:
 00000425  BA 000000AF R				mov edx, OFFSET prompt5
 0000042A  E8 00000000 E				call WriteString
 0000042F  EB C2					jmp Next
 00000431					Done:
 00000431  59						pop ecx
 00000432  5E						pop esi
 00000433  88 86 0000026F R				mov keyarray5[esi], al
 00000439  46						inc esi
 0000043A  E2 AB			loop L2

 0000043C  C3			ret
 0000043D			KeySize5 ENDP


				;--------------KEY6 checking procedure-----------------------
 0000043D			KeySize6 PROC
 0000043D  B9 00000006			mov ecx, 6							;code for user entering in key of size 5 (range 0-4)
 00000442  BE 00000000			mov esi, 0
 00000447				L11:
					
 00000447  56					push esi
 00000448  51					push ecx 
 00000449  BA 000000F1 R			mov edx, OFFSET prompt9
 0000044E  E8 00000000 E			call WriteString
 00000453					Next:
 00000453  E8 00000000 E				call ReadInt
 00000458  83 F8 05					cmp eax, 5
 0000045B  77 1C					ja OutOfRange
 0000045D  83 F8 00					cmp eax, 0
 00000460  72 17					jb OutOfRange
						;-------------------loop comparing values entered with ones in the array----------------------
 00000462  B9 00000006				mov ecx, 6
 00000467  BE 00000000				mov esi, 0
 0000046C					L12:
 0000046C  3A 86 00000274 R				cmp al, keyarray6[esi]
 00000472  74 11					je Repeats
 00000474  46						inc esi
 00000475  E2 F5				loop L12
 00000477  EB 18				jmp Done
						;-------------------------------------------------

 00000479					OutOfRange:
 00000479  BA 00000130 R				mov edx, OFFSET prompt10
 0000047E  E8 00000000 E				call WriteString
 00000483  EB CE					jmp Next

 00000485					Repeats:
 00000485  BA 000000AF R				mov edx, OFFSET prompt5
 0000048A  E8 00000000 E				call WriteString
 0000048F  EB C2					jmp Next
 00000491					Done:
 00000491  59						pop ecx
 00000492  5E						pop esi
 00000493  88 86 00000274 R				mov keyarray6[esi], al
 00000499  46						inc esi
 0000049A  E2 AB			loop L11

 0000049C  C3			ret
 0000049D			KeySize6 ENDP

				;---------------Display procedure-------------------------
 0000049D			Display PROC
				;display arrays
 0000049D  E8 00000000 E		call crlf
 000004A2  B8 0000000B			mov eax, (lightcyan)
 000004A7  E8 00000000 E		call SetTextColor
 000004AC  BA 000000D7 R		mov edx, OFFSET prompt7
 000004B1  E8 00000000 E		call WriteString
 000004B6  BA 00000269 R		mov edx, OFFSET lbrace								;"{"
 000004BB  E8 00000000 E		call WriteString
 000004C0  BA 000001E6 R		mov edx, OFFSET plainTextArray
 000004C5  E8 00000000 E		call Writestring
 000004CA  E8 00000000 E		call Crlf
 000004CF  B8 0000000D			mov eax, (lightmagenta)
 000004D4  E8 00000000 E		call SetTextColor
 000004D9  BA 000000E4 R		mov edx, OFFSET prompt8
 000004DE  E8 00000000 E		call WriteString
 000004E3  BA 00000269 R		mov edx, OFFSET lbrace								;"{"
 000004E8  E8 00000000 E		call WriteString
 000004ED  BA 00000285 R		mov edx, OffSET cipherTextArray
 000004F2  E8 00000000 E		call Writestring
 000004F7  E8 00000000 E		call Crlf
 000004FC  E8 00000000 E		call Crlf
 00000501  C3			ret
 00000502			Display ENDP

				;-------------------------END DISPLAy PROCEDURE KeyArray Size = 5----------
 00000502			innerloop5 PROC

 00000502			L4:
						
 00000502  8A 85 000001EB R			mov al, plainTextArray[SIZEOF keyarray5 + ebp]	
 00000508  0F B6 B3				movzx esi,keyarray5[ebx]	
	   0000026F R
 0000050F  53					push ebx
 00000510  50					push eax
 00000511  56					push esi
 00000512  B8 00000005				mov eax, SIZEOF keyarray5
 00000517  0F B6 1D				movzx ebx, x
	   000002FE R
 0000051E  F7 E3				mul ebx	
 00000520  5E					pop esi					;product is in edx
 00000521  03 C6				add eax, esi 
 00000523  8B D0				mov edx, eax
 00000525  B8 00000000				mov eax, 0					 
 0000052A  58					pop eax
 0000052B  88 82 00000285 R			mov cipherTextArray[edx],al
 00000531  5B					pop ebx						;?????????
 00000532  43					inc ebx		
 00000533  45					inc ebp
						
						
 00000534  E2 CC				loop L4

 00000536  C3			ret
 00000537			innerloop5 ENDP


				;---------------END DISPLAY PROCEDURE KeyArray Size = 6----------------------------
 00000537			innerloop6 PROC

 00000537			L15:
						
 00000537  8A 85 000001EC R			mov al, plainTextArray[SIZEOF keyarray6 + ebp]	
 0000053D  0F B6 B3				movzx esi,keyarray6[ebx]	
	   00000274 R
 00000544  53					push ebx
 00000545  50					push eax
 00000546  56					push esi
 00000547  B8 00000006				mov eax, SIZEOF keyarray6
 0000054C  0F B6 1D				movzx ebx, x
	   000002FE R
 00000553  F7 E3				mul ebx	
 00000555  5E					pop esi					;product is in edx
 00000556  03 C6				add eax, esi 
 00000558  8B D0				mov edx, eax
 0000055A  B8 00000000				mov eax, 0					 
 0000055F  58					pop eax
 00000560  88 82 00000285 R			mov cipherTextArray[edx],al
 00000566  5B					pop ebx						;?????????
 00000567  43					inc ebx		
 00000568  45					inc ebp
						
						
 00000569  E2 CC				loop L15

 0000056B  C3			ret
 0000056C			innerloop6 ENDP
				;-----------------------------------------------







				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/05/17 14:10:51
)Add and Subtract,           (AddSub2.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000300 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000056C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayKey5  . . . . . . . . . .	P Near	 000002B1 _TEXT	Length= 00000096 Public STDCALL
  L17  . . . . . . . . . . . . .	L Near	 000002E0 _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 00000323 _TEXT	
DisplayKey6  . . . . . . . . . .	P Near	 00000347 _TEXT	Length= 00000096 Public STDCALL
  L18  . . . . . . . . . . . . .	L Near	 00000376 _TEXT	
  L16  . . . . . . . . . . . . .	L Near	 000003B9 _TEXT	
Display  . . . . . . . . . . . .	P Near	 0000049D _TEXT	Length= 00000065 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
First5 . . . . . . . . . . . . .	P Near	 00000286 _TEXT	Length= 0000002B Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000029A _TEXT	
First6 . . . . . . . . . . . . .	P Near	 000001FA _TEXT	Length= 0000002B Public STDCALL
  L13  . . . . . . . . . . . . .	L Near	 0000020E _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
KeySize5 . . . . . . . . . . . .	P Near	 000003DD _TEXT	Length= 00000060 Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 000003E7 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 000003F3 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 0000040C _TEXT	
  OutOfRange . . . . . . . . . .	L Near	 00000419 _TEXT	
  Repeats  . . . . . . . . . . .	L Near	 00000425 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 00000431 _TEXT	
KeySize6 . . . . . . . . . . . .	P Near	 0000043D _TEXT	Length= 00000060 Public STDCALL
  L11  . . . . . . . . . . . . .	L Near	 00000447 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 00000453 _TEXT	
  L12  . . . . . . . . . . . . .	L Near	 0000046C _TEXT	
  OutOfRange . . . . . . . . . .	L Near	 00000479 _TEXT	
  Repeats  . . . . . . . . . . .	L Near	 00000485 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 00000491 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Rest5  . . . . . . . . . . . . .	P Near	 00000225 _TEXT	Length= 00000061 Public STDCALL
  lcipher  . . . . . . . . . . .	L Near	 0000025E _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000026B _TEXT	
Rest6  . . . . . . . . . . . . .	P Near	 00000199 _TEXT	Length= 00000061 Public STDCALL
  lcipherl . . . . . . . . . . .	L Near	 000001D2 _TEXT	
  L14  . . . . . . . . . . . . .	L Near	 000001DF _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
innerloop5 . . . . . . . . . . .	P Near	 00000502 _TEXT	Length= 00000035 Public STDCALL
  L4 . . . . . . . . . . . . . .	L Near	 00000502 _TEXT	
innerloop6 . . . . . . . . . . .	P Near	 00000537 _TEXT	Length= 00000035 Public STDCALL
  L15  . . . . . . . . . . . . .	L Near	 00000537 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000199 Public STDCALL
  Encrypt  . . . . . . . . . . .	L Near	 00000000 _TEXT	
  clear5 . . . . . . . . . . . .	L Near	 00000014 _TEXT	
  clear6 . . . . . . . . . . . .	L Near	 00000028 _TEXT	
  cleartextarrays  . . . . . . .	L Near	 0000003C _TEXT	
  L10  . . . . . . . . . . . . .	L Near	 00000078 _TEXT	
  Redo . . . . . . . . . . . . .	L Near	 00000081 _TEXT	
  k5 . . . . . . . . . . . . . .	L Near	 000000C1 _TEXT	
  k6 . . . . . . . . . . . . . .	L Near	 000000CD _TEXT	
  Lend . . . . . . . . . . . . .	L Near	 000000D7 _TEXT	
  m5 . . . . . . . . . . . . . .	L Near	 000000E2 _TEXT	
  m6 . . . . . . . . . . . . . .	L Near	 00000113 _TEXT	
  mend . . . . . . . . . . . . .	L Near	 00000142 _TEXT	
  Again  . . . . . . . . . . . .	L Near	 00000151 _TEXT	
  OutOfRange2  . . . . . . . . .	L Near	 00000186 _TEXT	
  pend . . . . . . . . . . . . .	L Near	 00000192 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 0000025F _DATA	
cipherTextArray  . . . . . . . .	Byte	 00000285 _DATA	
cipherTextString . . . . . . . .	Byte	 000002FF _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
holder . . . . . . . . . . . . .	Byte	 0000026E _DATA	
keyarray5  . . . . . . . . . . .	Byte	 0000026F _DATA	
keyarray6  . . . . . . . . . . .	Byte	 00000274 _DATA	
ksize  . . . . . . . . . . . . .	Byte	 0000026D _DATA	
lbrace . . . . . . . . . . . . .	Byte	 00000269 _DATA	
lbracket . . . . . . . . . . . .	Byte	 00000265 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
plainTextArray . . . . . . . . .	Byte	 000001E6 _DATA	
posarray5  . . . . . . . . . . .	Byte	 0000027A _DATA	
posarray6  . . . . . . . . . . .	Byte	 0000027F _DATA	
prompt10 . . . . . . . . . . . .	Byte	 00000130 _DATA	
prompt11 . . . . . . . . . . . .	Byte	 0000016C _DATA	
prompt12 . . . . . . . . . . . .	Byte	 00000172 _DATA	
prompt13 . . . . . . . . . . . .	Byte	 00000198 _DATA	
prompt14 . . . . . . . . . . . .	Byte	 000001DC _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000014 _DATA	
prompt3  . . . . . . . . . . . .	Byte	 00000034 _DATA	
prompt4  . . . . . . . . . . . .	Byte	 00000073 _DATA	
prompt5  . . . . . . . . . . . .	Byte	 000000AF _DATA	
prompt6  . . . . . . . . . . . .	Byte	 000000D1 _DATA	
prompt7  . . . . . . . . . . . .	Byte	 000000D7 _DATA	
prompt8  . . . . . . . . . . . .	Byte	 000000E4 _DATA	
prompt9  . . . . . . . . . . . .	Byte	 000000F1 _DATA	
rbrace . . . . . . . . . . . . .	Byte	 0000026B _DATA	
rbracket . . . . . . . . . . . .	Byte	 00000267 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 00000263 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x  . . . . . . . . . . . . . . .	Byte	 000002FE _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
